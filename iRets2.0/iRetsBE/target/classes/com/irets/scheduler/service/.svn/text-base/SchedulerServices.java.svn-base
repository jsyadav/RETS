package com.irets.scheduler.service;import com.irets.logging.domain.AppLogger;import com.irets.service.AbstractServices;import org.quartz.JobDetail;import org.quartz.Scheduler;import org.quartz.SchedulerException;import org.quartz.Trigger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Service("SchedulerServices")public class SchedulerServices extends AbstractServices {	private AppLogger logger = AppLogger.getLogger(SchedulerServices.class);		private Scheduler scheduler;		@Autowired	public void setSchedulerFactory(Scheduler scheduler) {        this.scheduler = scheduler;    }		public Scheduler getScheduler () {    	return scheduler;    	    }		public void scheduleJob(JobDetail job, Trigger trigger)  {		scheduleJob(job, trigger, Scheduler.DEFAULT_GROUP);	}	public void scheduleJob (JobDetail job, Trigger trigger, String groupName) {		job.setGroup(groupName);		try {			scheduler.scheduleJob(job, trigger);			logger.debug("Job " + job.getName() + " was scheduled successfully");		} catch (SchedulerException e) {			logger.error("Could not schedule job " + job.getName(), e);		}	}	public boolean unscheduleJob(String triggerName, String group) {        try {            return scheduler.unscheduleJob(triggerName, group);        } catch (SchedulerException e) {        	logger.error("Could not unschedule job " + triggerName, e);        }        return false;    }	public boolean unscheduleJob(String triggerName) {		return unscheduleJob(triggerName, Scheduler.DEFAULT_GROUP);	}	public boolean deleteJob(String jobName, String group) {        try {            return scheduler.deleteJob(jobName, group);        } catch (SchedulerException e) {        	logger.error("Could not delete job " + jobName, e);        }        return false;    }	public boolean deleteJob(String jobName) {		return deleteJob(jobName, Scheduler.DEFAULT_GROUP);	}	public void rescheduleJob(String jobName, Trigger trigger, String group) {		try {		   scheduler.rescheduleJob(jobName, group, trigger);		} catch (SchedulerException e) {			logger.error("Could not reschedule Job " + jobName, e);		}	}	public void rescheduleJob(String jobName, Trigger trigger) {		rescheduleJob(jobName, trigger, Scheduler.DEFAULT_GROUP);	}		public void destroy() {        try {            scheduler.shutdown();        } catch (Throwable e) {            logger.error("Failed to shutdown Quartz Scheduler!", e);        }            }}