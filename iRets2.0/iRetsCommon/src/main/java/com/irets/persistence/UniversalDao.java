package com.irets.persistence;import com.irets.exception.ObjectNotFoundException;import com.ibatis.sqlmap.client.event.RowHandler;import java.io.Serializable;import java.util.List;import org.springframework.orm.ibatis.SqlMapClientTemplate;/** * Universal stand-alone DAO */public interface UniversalDao {	SqlMapClientTemplate getSqlMapClientTemplate();    /**     * Gets all objects of given type.     *     * @param clazz class type.     * @return list of objects.     */    List getAll(Class clazz);    /**     * Gets all objects of given type.     *     * @param clazz class type.     * @param customerId customer ID.     * @return list of objects.     */    List getAll(Class clazz, long customerId);    /**     * Load object by ID and class type.     *     * @param clazz class     * @param obj query parameter.     * @return object.     * @throws ObjectNotFoundException if object was not found.     */    Object get(Class clazz, Object obj) throws ObjectNotFoundException;    /**     * Checks for existence of an object.     *     * @param clazz class     * @param obj query parameter.     * @return - true if it exists, false if it doesn't     */    boolean exists(Class clazz, Object obj);    /**     * Generic method to save an object.     *     * @param clazz class     * @param object the object to save     * @throws ObjectNotFoundException if object was not found.     */    void save(Class clazz, Object object) throws ObjectNotFoundException;    /**     * Creates new object.     *     * @param clazz class type.     * @param object object properties.     * @return ID of the new object.     */    Serializable create(Class clazz, Object object);    /**     * Generic method to delete an object based     *     * @param clazz class     * @param obj query parameter.     * @throws ObjectNotFoundException if object was not found.     */    void delete(Class clazz, Object obj) throws ObjectNotFoundException;    /**     * Loads one object using given query.     *     * @param queryName query name.     * @param obj query parameter.     * @return object     */    Object getByQueryName(String queryName, Object obj);    /**     * List objects by given query and property.     *     * @param queryName query name.     * @param obj query parameter.     * @return list of objects     */    List listByQueryName(String queryName, Object obj);    /**     * Updates using query name.     *     * @param queryName query name as in SQL map.     * @param parameter query parameter.     * @return number of updated rows.     */    int updateByQueryName(String queryName, Object parameter);    /**     * Inserts object by given query name.     *     * @param queryName query name.     * @param parameter parameter.     * @return generated primary key.     */    Object insertByQueryName(String queryName, Object parameter);    /**     * Executes select with row handler.     *     * @param queryName query name.     * @param parameter query parameter     * @param rowHandler row handler.     */    void listByQueryName(String queryName, Object parameter, RowHandler rowHandler);        List listByQueryName(String queryName, Object obj,int skip, int pageSize);}