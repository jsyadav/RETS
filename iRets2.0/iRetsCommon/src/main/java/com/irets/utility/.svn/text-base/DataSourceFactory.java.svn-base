package com.irets.utility;import org.apache.commons.dbcp.BasicDataSource;import org.apache.log4j.Logger;import java.io.IOException;import java.io.InputStream;import java.util.Properties;public class DataSourceFactory {    Logger log = Logger.getLogger(DataSourceFactory.class);    public DataSourceFactory() {    }    public BasicDataSource createDataSource() {        BasicDataSource source = new BasicDataSource();        Properties defaultProperties = new Properties();        try {            InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream("db.properties");            defaultProperties.load(is);            is.close();        } catch (IOException e) {            //ignore        }        String dbHost = getProperty("db.host", defaultProperties);        String urlPrefix = getProperty("jdbc.url.prefix", defaultProperties);        String url = String.format("%s%s/%s", urlPrefix, dbHost, getSchemaName(defaultProperties));        String userName = getProperty("jdbc.username", defaultProperties);        String password = getProperty("jdbc.password", defaultProperties);        source.setDriverClassName(getProperty("jdbc.driverClassName", defaultProperties, "com.mysql.jdbc.Driver"));        source.setMaxActive(Integer.parseInt(getProperty("db.max.active", defaultProperties, "100")));        source.setMaxWait(Integer.parseInt(getProperty("db.max.wait", defaultProperties, "1000")));        source.setPoolPreparedStatements                (Boolean.parseBoolean(getProperty("db.pool.prepared.statements", defaultProperties, "true")));        source.setDefaultAutoCommit                (Boolean.parseBoolean(getProperty("db.default.autocommit", defaultProperties, "true")));        source.setUrl(url);        source.setUsername(userName);        source.setPassword(password);        //Allows ';' separated queries execution as one, required for DB migration.          source.addConnectionProperty("allowMultiQueries", "true");        log.debug("DB URL: "+url);        System.out.println("DB URL: "+url);        return source;    }    protected String getSchemaName(Properties defaultProperties) {        return getProperty("db.name", defaultProperties);    }    private String getProperty(String name, Properties defaultProperties) {        String s = null;        if (s == null) {            s = defaultProperties.getProperty(name);        }        return s;    }    private String getProperty(String name, Properties defaultProperties, String defaultProperty) {        String s = getProperty(name, defaultProperties);        if (s == null) {            s = defaultProperty;        }        return s;    }}