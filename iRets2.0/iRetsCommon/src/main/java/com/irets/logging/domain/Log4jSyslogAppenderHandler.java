package com.irets.logging.domain;import java.util.Iterator;import java.util.List;import org.apache.log4j.Level;import org.apache.log4j.PatternLayout;import org.apache.log4j.net.SyslogAppender;public class Log4jSyslogAppenderHandler {		private static final int DEFAULT_SYSLOG_PORT = 514;			AppLogger logger = AppLogger.getLogger(Log4jSyslogAppenderHandler.class);				public Log4jSyslogAppenderHandler(){}				public void add(List<Syslog> syslogServers) {						if (syslogServers == null || syslogServers.isEmpty()) {				logger.debug("No syslog servers specified");				return;			}			Iterator<Syslog> it = syslogServers.iterator();			while (it.hasNext()) {				Syslog sys = (Syslog) it.next();				SyslogAppender appender;				try {										Level threshold = Level.WARN;					int facility = SyslogAppender.LOG_LOCAL2;										String facilityStr = sys.getFacility();										if ((facilityStr != null)&&(!facilityStr.equals(""))){						facility = SyslogAppender.getFacility(facilityStr);					}										int	port = (sys.getPort() != 0) ? sys.getPort() : DEFAULT_SYSLOG_PORT;					String host = sys.getHost() + ":" + port;					appender = new SyslogAppender(new PatternLayout("%d [%t] %-5p %c - %m%n"),							host, facility);					appender.setName(host);										String syslogThreshold = sys.getThreshold();					if ((syslogThreshold != null) && !(syslogThreshold.equals("")))						threshold = getThreshold(syslogThreshold);					appender.setThreshold(threshold);					AppLogger.getRootLogger().addAppender(appender);					AppLogger.getExtjsLogger().addAppender(appender);																				logger.debug("Syslog server " + appender.getName() + " initialized");									} catch (Exception e) {					logger.error(e);				}			}					}				public void remove(String syslogName) {			AppLogger.getRootLogger().removeAppender(syslogName);			AppLogger.getExtjsLogger().removeAppender(syslogName);		}							public void removeAll(){			AppLogger.getRootLogger().removeAllAppenders();			AppLogger.getExtjsLogger().removeAllAppenders();		}				private Level getThreshold (String level) {						if (level.equalsIgnoreCase("DEBUG"))				return Level.DEBUG;			else if (level.equalsIgnoreCase("INFO"))				return Level.INFO;			else if (level.equalsIgnoreCase("WARN"))				return Level.WARN;			else if (level.equalsIgnoreCase("ERROR"))				return Level.ERROR;			else if (level.equalsIgnoreCase("FATAL"))				return Level.FATAL;						return Level.WARN;		}		}