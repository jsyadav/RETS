package com.irets.logging.domain;import org.apache.log4j.Logger;public class AppLogger {	private Logger logger;	public static final AppLogger ROOT_LOGGER = AppLogger.getLogger("com.irets");		public static final AppLogger MYEXTJS_LOGGER = AppLogger.getLogger("com.softwarementors.extjs.djn");			protected AppLogger() {	}	    protected AppLogger(Logger logger) {    	        this.setLoggerInstance(logger);    }    protected void setLoggerInstance(Logger logger) {        this.logger = logger;    }        protected Logger getLoggerInstance() {        return this.logger;    }    		static public AppLogger getLogger(String name) {	    return new AppLogger(Logger.getLogger(name));	}		static public AppLogger getLogger(Class clazz) {		return new AppLogger(Logger.getLogger(clazz.getName()));	}		/**Logs a message at TRACE level    *    * @param message    */	public void trace(Object message) {		logger.trace(message);	}		/**Logs a stack trace of <code>Throwable</code> and message at TRACE level    *    * @param message    * @param t    */   	public void trace(Object message, Throwable t) {   		logger.trace(message, t);   	}	   /**Logs a message at DEBUG level    *    * @param message    */	public void debug(Object message) {		logger.debug(message);	}		/**Logs a stack trace of <code>Throwable</code> and message at DEBUG level    *    * @param message    * @param t    */   	public void debug(Object message, Throwable t) {   		logger.debug(message, t);   	}      /**Logs a message at INFO level    *    * @param message    */   	public void info(Object message) {   		logger.info(message);   	}	   /**Logs a stack trace of <code>Throwable</code> and message at INFO level    *    * @param message    * @param t    */   	public void info(Object message, Throwable t) {   		logger.info(message, t);   	}   	   /**Logs a message at WARNING level    *    * @param message    */   	public void warn(String message) {   		logger.warn(message);   	}   /**Logs a stack trace of <code>Throwable</code> at WARNING level    *    * @param t Throwable    */   	public void warn(Throwable t) {   		logger.warn("",t);   	}   /**Logs a stack trace of <code>Throwable</code> and message at WARNING level    *    * @param message    * @param t    */   	public void warn(String message, Throwable t) {   		logger.warn(message, t);   	}   /**Logs a message at ERROR level    *    * @param message    */   	public void error(String message) {   		logger.error(message);   	}   /**Logs a stack trace of <code>Throwable</code> at ERROR level    *    * @param t Throwable    */   	public void error(Throwable t) {   		logger.error("", t);   	}   /**Logs a stack trace of <code>Throwable</code> and message at ERROR level    *    * @param message    * @param t    */   	public void error(String message, Throwable t) {   		logger.error(message, t);   	}        public void assertLog (boolean assertion, String msg) {    	logger.assertLog(assertion, msg);    }        public boolean isDebugEnabled() {    	return logger.isDebugEnabled();    }        public boolean isInfoEnabled() {    	return logger.isInfoEnabled();    }        public boolean isTraceEnabled() {    	return logger.isTraceEnabled();    }        public static Logger getRootLogger() {    	return ROOT_LOGGER.getLoggerInstance();    }       public static Logger getExtjsLogger() {    	return MYEXTJS_LOGGER.getLoggerInstance();    }}