package com.irets.service;import com.irets.exception.AuthorizationException;import com.irets.persistence.UniversalDao;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.ApplicationContext;import org.springframework.security.core.Authentication;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.context.SecurityContext;import org.springframework.security.core.context.SecurityContextHolder;import java.util.Collection;/** */public abstract class AbstractServices {    protected UniversalDao universalDao;    protected ApplicationContext applicationContext;    @Autowired    public void setUniversalDao(UniversalDao universalDao) {        this.universalDao = universalDao;    }    @Autowired    public void setApplicationContext(ApplicationContext applicationContext) {        this.applicationContext = applicationContext;    }    /**     * Checks if current user has roles.     *     * @param roles authorized roles.     * @throws AuthorizationException if access is not granted     */    protected void authorizeByRoles(String roles[]) throws AuthorizationException {        SecurityContext s =  SecurityContextHolder.getContext();        Authentication a = s.getAuthentication();        Collection<GrantedAuthority> aa = a.getAuthorities();        for (String r : roles) {            if (contains(aa, r)) {                return;            }        }        throw new AuthorizationException();    }    private boolean contains(Collection<GrantedAuthority> authorities, String role) {        if (authorities != null) {            for (GrantedAuthority a : authorities) {                if (role.equals(a.getAuthority())) {                    return true;                }            }        }        return false;    }}