package com.irets.persistence;import com.irets.exception.ObjectNotFoundException;import com.irets.logging.domain.AppLogger;import com.ibatis.sqlmap.client.SqlMapClient;import com.ibatis.sqlmap.client.event.RowHandler;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Required;import org.springframework.orm.ibatis.SqlMapClientTemplate;import org.springframework.stereotype.Repository;import org.springframework.util.ClassUtils;import java.io.Serializable;import java.util.List;/** * Implementation of UniversalDao for CRUD operations. */@Repository("universalDao")public final class UniversalDaoImpl implements UniversalDao {    private static int selectNumber = 0;    AppLogger log = AppLogger.getLogger(getClass());    private SqlMapClientTemplate sqlMapClientTemplate = new SqlMapClientTemplate();    @Autowired    @Required    public final void setSqlMapClient(SqlMapClient sqlMapClient) {        this.sqlMapClientTemplate.setSqlMapClient(sqlMapClient);    }    public SqlMapClientTemplate getSqlMapClientTemplate() {        return sqlMapClientTemplate;    }    public List getAll(Class clazz,  long customerId) {        long timeStamp = System.currentTimeMillis();        String queryName = DaoUtil.getSelectQuery(ClassUtils.getShortName(clazz));        try {            return getSqlMapClientTemplate().queryForList(queryName, customerId);        } finally {            if (log.isDebugEnabled()) {                log.debug(queryName+" "+(System.currentTimeMillis()-timeStamp)+"ms. "+selectNumber++);            }        }    }    public List getAll(Class clazz) {        long timeStamp = System.currentTimeMillis();        String queryName = DaoUtil.getSelectQuery(ClassUtils.getShortName(clazz));        try {            return getSqlMapClientTemplate().queryForList(queryName);        } finally {            if (log.isDebugEnabled()) {                log.debug(queryName+" "+(System.currentTimeMillis()-timeStamp)+"ms. "+selectNumber++);            }        }    }    public Object get(Class clazz, Object obj) throws ObjectNotFoundException {        long timeStamp = System.currentTimeMillis();        String queryName = DaoUtil.getFindQuery(ClassUtils.getShortName(clazz));        Object object;        try {            object = getSqlMapClientTemplate().queryForObject(queryName, obj);        } finally {            if (log.isDebugEnabled()) {                log.debug(queryName+" "+(System.currentTimeMillis()-timeStamp)+"ms. "+selectNumber++);            }        }        if (object == null) {            log.debug(clazz + "' object with id '" + obj + "' was not found");            throw new ObjectNotFoundException();        }        return object;    }    public boolean exists(Class clazz, Object obj) {        long timeStamp = System.currentTimeMillis();        String queryName = DaoUtil.getFindQuery(ClassUtils.getShortName(clazz));        Object object;        try {            object = getSqlMapClientTemplate().queryForObject(queryName, obj);        } finally {            if (log.isDebugEnabled()) {                log.debug(queryName+" "+(System.currentTimeMillis()-timeStamp)+"ms. "+selectNumber++);            }        }        return object != null;    }    public void save(Class clazz, Object object) throws ObjectNotFoundException {        long timeStamp = System.currentTimeMillis();        String queryName = DaoUtil.getUpdateQuery(ClassUtils.getShortName(clazz));        int c;        try {            c = getSqlMapClientTemplate().update(queryName, object);        } finally {            if (log.isDebugEnabled()) {                log.debug(queryName+" "+(System.currentTimeMillis()-timeStamp)+"ms.");            }        }        if (c == 0) {            throw new ObjectNotFoundException();        }    }    public Serializable create(Class clazz, Object object) {        long timeStamp = System.currentTimeMillis();        String queryName = DaoUtil.getInsertQuery(ClassUtils.getShortName(clazz));        try {            return (Serializable)getSqlMapClientTemplate().insert(queryName, object);        } finally {            if (log.isDebugEnabled()) {                log.debug(queryName+" "+(System.currentTimeMillis()-timeStamp)+"ms.");            }        }    }    public void delete(Class clazz, Object obj) throws ObjectNotFoundException {        long timeStamp = System.currentTimeMillis();        String queryName = DaoUtil.getDeleteQuery(ClassUtils.getShortName(clazz));        int c;        try {            c = getSqlMapClientTemplate().update(queryName, obj);        } finally {            if (log.isDebugEnabled()) {                log.debug(queryName+" "+(System.currentTimeMillis()-timeStamp)+"ms.");            }        }        if (c == 0) {            throw new ObjectNotFoundException("Object with id '" + obj + "' was not found");        }    }    public Object getByQueryName(String queryName, Object obj) {        long timeStamp = System.currentTimeMillis();        try {            return getSqlMapClientTemplate().queryForObject (queryName, obj);        } finally {            if (log.isDebugEnabled()) {                log.debug(queryName+" "+(System.currentTimeMillis()-timeStamp)+"ms. "+selectNumber++);            }        }    }    public List listByQueryName(String queryName, Object obj) {           long timeStamp = System.currentTimeMillis();        try {            return getSqlMapClientTemplate().queryForList(queryName, obj);        } finally {            if (log.isDebugEnabled()) {                log.debug(queryName+" "+(System.currentTimeMillis()-timeStamp)+"ms. "+selectNumber++);            }        }    }    public List listByQueryName(String queryName, Object obj,int skip, int pageSize) {        long timeStamp = System.currentTimeMillis();        try {            return getSqlMapClientTemplate().queryForList(queryName, obj,skip,pageSize);        } finally {            if (log.isDebugEnabled()) {                log.debug(queryName+" "+(System.currentTimeMillis()-timeStamp)+"ms. "+selectNumber++);            }        }    }       public int updateByQueryName(String queryName, Object parameter) {        long timeStamp = System.currentTimeMillis();        try {            return getSqlMapClientTemplate().update(queryName, parameter);        } finally {            if (log.isDebugEnabled()) {                log.debug(queryName+" "+(System.currentTimeMillis()-timeStamp)+"ms.");            }        }    }    public Object insertByQueryName(String queryName, Object parameter) {        long timeStamp = System.currentTimeMillis();        try {            return getSqlMapClientTemplate().insert(queryName, parameter);        } finally {            if (log.isDebugEnabled()) {                log.debug(queryName+" "+(System.currentTimeMillis()-timeStamp)+"ms.");            }        }    }    public void listByQueryName(String queryName, Object parameter, RowHandler rowHandler) {        getSqlMapClientTemplate().queryWithRowHandler(queryName, parameter, rowHandler);    }}